// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Route {
  id           String             @id @default(uuid())
  routeName    String
  routeColor   String
  routeChannel RouteChannel?
  coordinates  RouteCoordinates[]
  buses        Bus[]
  stops        Stop[]
  sections      RouteSection[]
}

model RouteSection {
  id          String @id @default(uuid())
  routeId    String // Foreign key for the Route model
  route      Route  @relation(fields: [routeId], references: [id])
  sectionName String
  channelId   String
  fieldNumber String
}

model RouteCoordinates {
  id         String @id @default(uuid())
  routeId    String // Foreign key for the Route model
  route      Route  @relation(fields: [routeId], references: [id])
  pointOrder Int
  latitude   Float
  longitude  Float
}

model Bus {
  id          String              @id @default(uuid())
  route       Route               @relation(fields: [routeId], references: [id])
  routeId     String
  busName     String
  busNumber   String
  capacity    Int
  status      String
  driver      Driver?
  passengers  Passenger[]
  busChannel  BusChannel?
  busLocation BusLocationChannel?
}

model User {
  id     String  @id @default(uuid())
  name   String
  email  String  @unique
  role   String
  driver Driver?
}

model Driver {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  bus    Bus?    @relation(fields: [busId], references: [id])
  busId  String? @unique
}

model Passenger {
  id        String   @id @default(uuid())
  rfidUID   String // Store the RFID card UID
  scannedAt DateTime @default(now()) // Timestamp of when the card was scanned
  bus       Bus?     @relation(fields: [busId], references: [id])
  busId     String?
  stop      Stop?    @relation(fields: [stopId], references: [id])
  stopId    String?
}

model Stop {
  id         String      @id @default(uuid())
  route      Route       @relation(fields: [routeId], references: [id])
  routeId    String
  stopName   String
  latitude   String
  longitude  String
  passengers Passenger[] // New field to track passengers
}

model RouteChannel {
  id          String  @id @default(uuid())
  apiKey      String?
  channelId   String
  fieldNumber String
  route       Route   @relation(fields: [routeId], references: [id])
  routeId     String  @unique
}

model BusChannel {
  id          String @id @default(uuid())
  channelId   String
  fieldNumber String
  bus         Bus    @relation(fields: [busId], references: [id])
  busId       String @unique
}

model BusLocationChannel {
  id              String @id @default(uuid())
  bus             Bus    @relation(fields: [busId], references: [id])
  busId           String @unique
  channelId       String
  latFieldNumber  String
  longFieldNumber String
}
